{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/modica_annisa/Desktop/sammi_portfolio/src/app/api/get-animations/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\n\nexport async function GET() {\n\ttry {\n\t\tconst publicDir = path.join(process.cwd(), 'public', 'animation');\n\t\tconst files = fs.readdirSync(publicDir);\n\n\t\t// Filter for GIF files only and sort them\n\t\tconst gifFiles = files\n\t\t\t.filter((file) => file.toLowerCase().endsWith('.gif'))\n\t\t\t.sort((a, b) => {\n\t\t\t\t// Extract numbers from filenames for natural sorting\n\t\t\t\tconst numA = parseInt(a.match(/\\d+/)?.[0] || '0');\n\t\t\t\tconst numB = parseInt(b.match(/\\d+/)?.[0] || '0');\n\t\t\t\treturn numA - numB;\n\t\t\t});\n\n\t\treturn NextResponse.json(gifFiles);\n\t} catch (error) {\n\t\tconsole.error('Error reading animation directory:', error);\n\t\treturn NextResponse.json(\n\t\t\t{ error: 'Failed to load animations' },\n\t\t\t{ status: 500 }\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACrB,IAAI;QACH,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QACrD,MAAM,QAAQ,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;QAE7B,0CAA0C;QAC1C,MAAM,WAAW,MACf,MAAM,CAAC,CAAC,OAAS,KAAK,WAAW,GAAG,QAAQ,CAAC,SAC7C,IAAI,CAAC,CAAC,GAAG;YACT,qDAAqD;YACrD,MAAM,OAAO,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI;YAC7C,MAAM,OAAO,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI;YAC7C,OAAO,OAAO;QACf;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC1B,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAEhB;AACD","debugId":null}}]
}